# Objective:
Analyze and patch the existing daodiseo.app codebase with a Python script called appPatch.py that improves UI/UX visual consistency, dashboard structure, gamification placement, and component modularity. Your analysis and modifications should be based on the actual HTML, CSS, and JS files present in the project — especially in /templates/, /static/css/, and /src/.

# Why:
- Current UI has broken visual logic: inconsistent font sizes, color usage, component spacing, floating icon dots.
- Header bar is misaligned with the left sidebar (see dashboard screenshots).
- Gamification points system has been moved to bottom-left; it must be restored to the header and reflect actual ODIS token payments, not abstract points.
- Several UI components include small colored dots in the top-right corner — this design is visually noisy and should be removed or redesigned.

# Tasks (WBS-style):

## ✅ 1. UI/UX Style Consistency Audit
Based on code and class usage:
- Normalize font stack to: "Helvetica Neue", sans-serif
- Use base font sizing: 16px for body, 20px for headings, 12px for badges
- Apply consistent color palette across all components:
  - Text: white or light gray
  - Accent: #00d4ff
  - Primary buttons: gradient #e00d79 → #b80596
  - Background: charcoal/dark cosmic
- Remove/replace all floating colored dots in components. Use standard .badge-status or Bootstrap-style status labels instead.
- Audit all margin/padding/layout spacing for grid inconsistencies

## ✅ 2. Dashboard Layout Fix
- Fix header width so it aligns cleanly with the left sidebar (check Bootstrap container-fluid usage or CSS grid structure)
- Restore gamification reward button to the top header (it is now bottom-left)
- When clicked, show a modal or sidebar with actions paid in ODIS:
  - Connect Keplr: +25 ODIS
  - Upload BIM: +30 ODIS
  - Sign contract: +50 ODIS
- Cross-reference these actions in code and ensure they update wallets correctly across all /src/ routes

## ✅ 3. Performance & Code Hygiene
- Loop through /src/, /templates/, and /static/
  - Detect and remove duplicated code blocks or unused functions
  - Optimize CSS/JS loads (lazy-load charts or non-critical animations)
  - Log all changes to app_patch_report.log

## ✅ 4. Reorganize UI Around Orchestrator Architecture
- Reference /src/orchestrator.py (AI brain)
- Align UI screens/components to orchestrator stages:
  - Input: BIM Upload, Contract Form
  - Processing: AI Compliance Check, Token Generator
  - Output: Dashboard, Transaction Log, Reward Engine
- Restructure component templates accordingly (suggested paths):
  - /templates/orchestrator/dashboard.html
  - /templates/orchestrator/inputs/upload.html
  - /templates/orchestrator/outputs/rewards.html

# Deliverables:
- A Python script: appPatch.py
- A change log: app_patch_report.log
- Optional: restructure style.css to include class tokens like .btn-main, .text-accent, .card-meta

# Final Notes:
This app is for humans. Preserve familiarity. Simplify interactions. Respect Clean Architecture layering and modify only what's necessary to restore professional clarity and visual cohesion.