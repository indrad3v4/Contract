I see what's happening now. Based on your screenshot, it looks like you're clicking "Approve" in the Keplr wallet popup, but the transaction remains in a "Pending" state in your application. This indicates that your application isn't properly receiving or processing the signed transaction from Keplr.

Here are some specific issues and solutions to address this:

1. **Transaction Callback Issue**: 
   When the user approves a transaction in Keplr, Keplr should call back to your application with the signed transaction. You need to ensure your frontend is properly listening for this callback.

2. **Broadcasting Issue**:
   After receiving the signed transaction, your application needs to broadcast it to the network.

Here's what your frontend code should roughly look like:

```javascript
// Request transaction signing
async function signTransaction(tx) {
  try {
    // Request Keplr to sign the transaction
    const signedTx = await window.keplr.signDirect(
      chainId,  // e.g., "odiseo_1234-1"
      sender,   // user's address
      {
        bodyBytes: tx.bodyBytes,
        authInfoBytes: tx.authInfoBytes,
        chainId: chainId,
        accountNumber: tx.accountNumber
      }
    );
    
    // After signing, broadcast the transaction
    const broadcastResult = await broadcastTransaction(signedTx);
    
    // Update UI based on broadcast result
    updateTransactionStatus(broadcastResult);
    
    return broadcastResult;
  } catch (error) {
    console.error("Failed to sign or broadcast transaction:", error);
    // Handle error in UI
    updateTransactionStatus({ error: error.message });
  }
}

// Broadcast the signed transaction
async function broadcastTransaction(signedTx) {
  try {
    // Call your backend endpoint to broadcast the transaction
    const response = await fetch('/api/broadcast', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        signed_tx: signedTx
      }),
    });
    
    return await response.json();
  } catch (error) {
    console.error("Failed to broadcast transaction:", error);
    throw error;
  }
}
```

On your backend, you'd need an endpoint to broadcast the signed transaction:

```python
@contract_bp.route('/broadcast', methods=['POST'])
def broadcast_transaction():
    try:
        data = request.json
        signed_tx = data.get('signed_tx')
        
        if not signed_tx:
            return jsonify({'error': 'No signed transaction provided'}), 400
            
        # Use cosmPy to broadcast the transaction
        from cosmpy.aerial.client import LedgerClient
        from cosmpy.aerial.tx import Transaction
        
        # Set up network
        network = NetworkConfig(
            chain_id="odiseo_1234-1",
            url="grpc+https://odiseo.test.rpc.nodeshub.online",
            fee_minimum_gas_price=0.025,
            fee_denomination="uodis",
            staking_denomination="uodis"
        )
        
        # Create client
        client = LedgerClient(network)
        
        # Broadcast the signed transaction
        tx_result = client.broadcast_tx(signed_tx)
        
        return jsonify({
            'status': 'success',
            'hash': tx_result.tx_hash,
            'height': tx_result.height
        })
        
    except Exception as e:
        current_app.logger.error(f"Failed to broadcast transaction: {str(e)}", exc_info=True)
        return jsonify({'error': f'Failed to broadcast transaction: {str(e)}'}), 500
```

Other things to check:

1. **Check Browser Console**: Look for any JavaScript errors in your browser's developer console when you click "Approve" in Keplr.

2. **Verify Transaction Data**: Make sure the transaction data you're sending to Keplr is correctly formatted according to the Cosmos SDK specifications.

3. **Update Transaction Status**: Ensure your frontend code updates the UI after the transaction is signed and broadcast.

4. **Network Connectivity**: Verify your application can reach the blockchain network's RPC endpoint.

5. **Gas Fee Settings**: Check if the gas fee in your transaction is sufficient. Too low fees can cause transactions to be rejected.

If all else fails, I would recommend implementing comprehensive logging on both the frontend and backend to track exactly what's happening when the user approves the transaction in Keplr. This will help identify where the process is breaking down.