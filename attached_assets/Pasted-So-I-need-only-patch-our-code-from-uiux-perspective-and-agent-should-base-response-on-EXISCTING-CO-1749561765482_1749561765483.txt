So, I need only patch our code from uiux perspective, and agent should base response on EXISCTING CODE IN FILES, ESPECIALLY UIUX FILES: "Mmm ui ux what elements have? Consistency of Fonts, colours, what else? Why I ask it? I need prompt to explain agent how to do style consistent. In case look on image this ok colours that should be applied across all app components and inside components. Because now we have different fonts, sizes, colours, etc. + we need understanding how to organise dashboard. 

In second image you see actual dashboard. In header it visually didn't fit horizontal line in left pannel (need to to header wighter). Then idk why but agent shift game points to odiseo testnet ‚Äî we need to back gamification part back (now it as button in bottom left) and if we click we see all actions, and for this actions we pay not in points but in odis. Actions and prices in third image. So this should be back in header instead odiseo testnet, and you should verify cross routes variables related to actions in app and pay odises for actions completing correctly.  + check missed functionality that we have in gamification button but in real it missed in app src/.

So think how we can prompt agent in replit to return pythonic script appPatch.py that I run to patch app. Moreover script should look issues in app like code dublicates, huge loads, etc to do app loading faster. 

+ analyse uiux components structure, because now in components across app we see visual element in every component, I'm about colour dots with small text in every component top right, that looks really bad 

So return prompt as fullstack dev-producer who works by wbs by tasks and results. And think how to reorganize uiux around daodiseo ai brain (orchestrator) so all components should be in this architecture that should be compared to existing clean architecture in src

But warning: we code app for human via replit agent, so this app for humans

üé® UI/UX Style Consistency ‚Äî Core Elements
 1. Typography
 ‚Ä¢ Font family (e.g., sans-serif throughout)
 ‚Ä¢ Font sizes (heading vs. body vs. button)
 ‚Ä¢ Line-height and spacing
 2. Color Palette
 ‚Ä¢ Backgrounds, text, highlights
 ‚Ä¢ Button/CTA consistency
 ‚Ä¢ Badge/dot indicators
 3. Layout System
 ‚Ä¢ Margin and padding spacing scale
 ‚Ä¢ Container widths
 ‚Ä¢ Grid alignment (Bootstrap rows/columns)
 4. Component Structure
 ‚Ä¢ Card layout reuse
 ‚Ä¢ Icon style (Feather/Iconify consistency)
 ‚Ä¢ Badge positioning (no floating mismatched dots)
 5. Interaction Patterns
 ‚Ä¢ Button hover/active states
 ‚Ä¢ Form field focus styles
 ‚Ä¢ Modal vs inline feedback (e.g. alerts)
 6. Visual Language
 ‚Ä¢ Shadow and depth for hierarchy
 ‚Ä¢ Rounded corners, consistent radius
 ‚Ä¢ Uniform status indicator language (‚ÄúVerified‚Äù, ‚ÄúTokenized‚Äù, etc.)
 7. Global Class Architecture
 ‚Ä¢ Use utility-first CSS (e.g. Bootstrap, Tailwind, or scoped custom)
 ‚Ä¢ Centralize repeated styles (e.g., class="btn-main", class="card-panel")"