**Enhanced Prompt for Coding LLM:**  

**Goal**  
Integrate the [OpenAI Agents Python](https://github.com/openai/openai-agents-python) framework into our existing system to enable LLM-driven interactions with **mock BIM IFC objects** (pre-file load).  
1. **LLM Gateway Setup**: Clone/modify the repository to handle BIM-specific tasks (e.g., querying mock IFC metadata, clash detection simulations).  
2. **Mock BIM Class**: Create a lightweight `MockIFC` class with sample properties (materials, spatial hierarchy) for testing agent logic.  
3. **AI Chat Component**: Update the interface to allow users to ask questions (e.g., “List walls in mock model”) and get agent responses using the mock data.  

**Return Format**  
Provide:  
1. **Code Snippets**: For the `MockIFC` class, LLM gateway integration, and chat component updates.  
2. **File Paths**: Indicate where changes should be made (e.g., `src/agents/bim_adapter.py`).  
3. **Testing Instructions**: How to validate mock-based responses before real IFC integration.  

**Warnings**  
- Keep the `MockIFC` class under 50 lines for simplicity.  
- Isolate OpenAI API key handling using environment variables.  
- Ensure mock responses mimic real IFC structure (e.g., `.get_property("walls")`).  
- Avoid modifying core agent logic—use wrappers/adapter patterns.  

**Context**  
Current system has:  
- A FastAPI backend (for LLM gateway)  
- React frontend with a basic chat UI  
- No BIM mock logic or pre-file-load capabilities  

---

**Example Code Snippets**  

1. **Mock BIM Class (`backend/src/mock_bim.py`)**  
```python  
class MockIFC:  
    def __init__(self):  
        self.properties = {  
            "walls": [{"name": "Wall_1", "material": "Concrete", "volume": "15m³"}],  
            "floors": [{"name": "Floor_1", "thickness": "0.3m"}]  
        }  

    def get_property(self, key: str):  
        return self.properties.get(key, "Property not found in mock IFC")  
```  

2. **AI Chat Component Update (`frontend/src/Chat.js`)**  
```javascript  
const handleMockQuery = async (query) => {  
  // Example: If user asks about walls, use mock data before real IFC loads  
  if (query.toLowerCase().includes("wall")) {  
    const mockResponse = await axios.post('/llm-gateway/ask', {  
      prompt: query,  
      context: new MockIFC().get_property("walls") // Use mock class  
    });  
    return mockResponse.data;  
  }  
};  
```  

**Key Improvements**:  
- Mock data triggers *before* real IFC files are loaded.  
- Minimal code changes by reusing existing API endpoints/UI components.  
- Clear separation between mock logic and production IFC handling.