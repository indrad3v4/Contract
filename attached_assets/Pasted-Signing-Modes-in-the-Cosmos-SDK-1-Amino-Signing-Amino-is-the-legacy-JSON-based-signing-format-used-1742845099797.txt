Signing Modes in the Cosmos SDK
1. Amino Signing: Amino is the legacy JSON-based signing format used by Cosmos SDK. It encodes transactions in a human-readable JSON structure and is widely supported across Cosmos-based blockchains.
   * Pros:
      * Highly compatible with older wallets and hardware devices, such as Ledger.
      * Easier to debug due to its JSON representation.
   * Cons:
      * Larger transaction sizes compared to Protobuf.
      * Limited efficiency due to its JSON-based structure.

Amino Signing
Function Signature


Copy
signAmino(
  chainId: string,
  signer: string,
  signDoc: StdSignDoc,
  signOptions?: KeplrSignOptions
): Promise<AminoSignResponse>;
The signAmino method signs an Amino-encoded StdSignDoc. Unlike CosmJS's OfflineSigner, Keplr's signAmino requires the chainId parameter to ensure the transaction is linked to the correct chain.

Parameters
* chainId (string): The chain ID of the chain where the transaction is being signed.
* signer (string): The Bech32 address of the signer.
* signDoc (StdSignDoc): The transaction document to be signed, encoded in Amino format.


Copy
interface StdSignDoc {
  chain_id: string;
  account_number: string;
  sequence: string;
  timeout_height?: string;
  fee: StdFee;
  msgs: Msg[];
  memo: string;
}
signOptions (KeplrSignOptions, optional): Additional signing options.
preferNoSetFee: If true, the fee configured by the dApp will be prioritized over the fee set by the user.
preferNoSetMemo: If true, the memo will be set by the dApp and the user will not be able to modify it.
disableBalanceCheck: If true, the transaction won't be blocked even if the balance is insufficient. Return Type

Copy
interface AminoSignResponse {
  readonly signed: StdSignDoc;
  readonly signature: StdSignature;
}
Example Usage


Copy
const signDoc = {
  "account_number": "227917",
  "chain_id": "celestia",
  "fee": {
    "gas": "96585",
    "amount": [{ "amount": "966", "denom": "utia" }]
  },
  "msgs": [
    {
      "type": "cosmos-sdk/MsgSend",
      "value": {
        // msg value objects here
      }
    }
  ],
  "sequence": "84",
  "memo": "Test transaction",
};

const signOptions = {
  preferNoSetFee: false,
  preferNoSetMemo: true,
  disableBalanceCheck: true,
};

const signedResponse = await keplr.signAmino(
  "celestia", 
  "celestia1...", 
  signDoc, 
  signOptions,
);

console.log("Signed Doc:", signedResponse.signed);
console.log("Signature:", signedResponse.signature);