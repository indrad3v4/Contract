
// Lazy Loading Implementation
// Generated by appPatch.py

class DAODISEOLazyLoader {
    constructor() {
        this.loadedModules = new Set();
        this.init();
    }
    
    init() {
        // Implement intersection observer for lazy loading
        this.observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    this.loadComponent(entry.target);
                }
            });
        }, { threshold: 0.1 });
        
        // Observe lazy-load elements
        document.querySelectorAll('[data-lazy-load]').forEach(el => {
            this.observer.observe(el);
        });
    }
    
    async loadComponent(element) {
        const componentName = element.dataset.lazyLoad;
        
        if (this.loadedModules.has(componentName)) {
            return;
        }
        
        try {
            // Show loading state
            element.innerHTML = '<div class="text-center p-4"><div class="spinner-border text-primary" role="status"></div></div>';
            
            // Dynamically import component
            const module = await import(`./components/${componentName}.js`);
            
            // Initialize component
            if (module.default) {
                new module.default(element);
            }
            
            this.loadedModules.add(componentName);
            this.observer.unobserve(element);
            
        } catch (error) {
            console.error(`Failed to load component ${componentName}:`, error);
            element.innerHTML = '<div class="alert alert-warning">Failed to load component</div>';
        }
    }
}

// Initialize lazy loader
document.addEventListener('DOMContentLoaded', () => {
    new DAODISEOLazyLoader();
});
