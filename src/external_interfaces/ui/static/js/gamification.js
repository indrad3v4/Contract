
// DAODISEO Gamification System
// Generated by appPatch.py

class DAODISEOGamification {
    constructor() {
        this.actions = {
        "upload_bim": {
                "reward": 30,
                "name": "Upload BIM File"
        },
        "sign_contract": {
                "reward": 50,
                "name": "Sign Smart Contract"
        },
        "connect_keplr": {
                "reward": 25,
                "name": "Connect Keplr Wallet"
        },
        "validate_file": {
                "reward": 20,
                "name": "Validate File Data"
        },
        "create_transaction": {
                "reward": 35,
                "name": "Create Transaction"
        },
        "stake_tokens": {
                "reward": 40,
                "name": "Stake ODIS Tokens"
        },
        "delegate_validator": {
                "reward": 30,
                "name": "Delegate to Validator"
        },
        "complete_profile": {
                "reward": 15,
                "name": "Complete User Profile"
        }
};
        this.userBalance = 0;
        this.totalEarned = 0;
        this.activityLog = [];
        
        this.init();
    }
    
    init() {
        // Initialize gamification button
        const gamificationBtn = document.getElementById('gamificationBtn');
        if (gamificationBtn) {
            gamificationBtn.addEventListener('click', () => this.openModal());
        }
        
        // Load user data
        this.loadUserData();
        
        // Set up action listeners
        this.setupActionListeners();
        
        // Update display
        this.updateDisplay();
    }
    
    openModal() {
        const modal = new bootstrap.Modal(document.getElementById('gamificationModal'));
        this.populateModal();
        modal.show();
    }
    
    populateModal() {
        // Update balance displays
        document.getElementById('modalOdisBalance').textContent = `${this.userBalance} ODIS`;
        document.getElementById('totalEarned').textContent = `${this.totalEarned} ODIS`;
        
        // Populate actions
        const actionsContainer = document.getElementById('gamificationActions');
        actionsContainer.innerHTML = '';
        
        Object.entries(this.actions).forEach(([actionId, actionData]) => {
            const actionCard = this.createActionCard(actionId, actionData);
            actionsContainer.appendChild(actionCard);
        });
        
        // Populate activity log
        this.populateActivityLog();
    }
    
    createActionCard(actionId, actionData) {
        const card = document.createElement('div');
        card.className = 'dds-card mb-3';
        card.innerHTML = `
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h6 class="mb-1">${actionData.name}</h6>
                    <small class="text-muted">Earn ${actionData.reward} ODIS</small>
                </div>
                <button class="dds-btn dds-btn-primary btn-sm" onclick="gamification.executeAction('${actionId}')">
                    Start Action
                </button>
            </div>
        `;
        return card;
    }
    
    executeAction(actionId) {
        const action = this.actions[actionId];
        if (!action) return;
        
        // Add to activity log
        this.activityLog.unshift({
            id: actionId,
            name: action.name,
            reward: action.reward,
            timestamp: new Date().toISOString(),
            status: 'completed'
        });
        
        // Update balance
        this.userBalance += action.reward;
        this.totalEarned += action.reward;
        
        // Save to localStorage
        this.saveUserData();
        
        // Update display
        this.updateDisplay();
        
        // Show success notification
        this.showNotification(`Earned ${action.reward} ODIS for ${action.name}!`);
        
        // Update global state
        if (typeof globalState !== 'undefined') {
            globalState.setState('gamification', {
                balance: this.userBalance,
                totalEarned: this.totalEarned,
                lastAction: actionId
            });
        }
    }
    
    setupActionListeners() {
        // Listen for app events that trigger rewards
        document.addEventListener('keplr-connected', () => this.executeAction('connect_keplr'));
        document.addEventListener('file-uploaded', () => this.executeAction('upload_bim'));
        document.addEventListener('contract-signed', () => this.executeAction('sign_contract'));
        document.addEventListener('file-validated', () => this.executeAction('validate_file'));
        document.addEventListener('transaction-created', () => this.executeAction('create_transaction'));
    }
    
    loadUserData() {
        const saved = localStorage.getItem('daodiseo_gamification');
        if (saved) {
            const data = JSON.parse(saved);
            this.userBalance = data.balance || 0;
            this.totalEarned = data.totalEarned || 0;
            this.activityLog = data.activityLog || [];
        }
    }
    
    saveUserData() {
        const data = {
            balance: this.userBalance,
            totalEarned: this.totalEarned,
            activityLog: this.activityLog.slice(0, 50) // Keep last 50 activities
        };
        localStorage.setItem('daodiseo_gamification', JSON.stringify(data));
    }
    
    updateDisplay() {
        // Update header balance
        const headerBalance = document.getElementById('userOdisBalance');
        if (headerBalance) {
            headerBalance.textContent = `${this.userBalance} ODIS`;
        }
        
        // Update modal if open
        const modalBalance = document.getElementById('modalOdisBalance');
        if (modalBalance) {
            modalBalance.textContent = `${this.userBalance} ODIS`;
        }
        
        const totalEarnedEl = document.getElementById('totalEarned');
        if (totalEarnedEl) {
            totalEarnedEl.textContent = `${this.totalEarned} ODIS`;
        }
    }
    
    populateActivityLog() {
        const logContainer = document.getElementById('activityLog');
        if (!logContainer) return;
        
        logContainer.innerHTML = '';
        
        this.activityLog.slice(0, 10).forEach(activity => {
            const logItem = document.createElement('div');
            logItem.className = 'dds-card mb-2';
            logItem.innerHTML = `
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <small class="text-muted">${new Date(activity.timestamp).toLocaleDateString()}</small>
                        <div>${activity.name}</div>
                    </div>
                    <div class="text-accent">+${activity.reward} ODIS</div>
                </div>
            `;
            logContainer.appendChild(logItem);
        });
        
        if (this.activityLog.length === 0) {
            logContainer.innerHTML = '<p class="text-muted text-center">No activity yet. Start completing actions to earn ODIS!</p>';
        }
    }
    
    showNotification(message) {
        // Create toast notification
        const toast = document.createElement('div');
        toast.className = 'toast position-fixed top-0 end-0 m-3';
        toast.innerHTML = `
            <div class="toast-header bg-success text-white">
                <i data-feather="star" class="me-2"></i>
                <strong class="me-auto">ODIS Earned!</strong>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast"></button>
            </div>
            <div class="toast-body">${message}</div>
        `;
        
        document.body.appendChild(toast);
        const bsToast = new bootstrap.Toast(toast);
        bsToast.show();
        
        // Remove toast after it's hidden
        toast.addEventListener('hidden.bs.toast', () => toast.remove());
    }
}

// Initialize gamification system
let gamification;
document.addEventListener('DOMContentLoaded', () => {
    gamification = new DAODISEOGamification();
});
